plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

def config = rootProject.ext.android
def supportDependencies = rootProject.ext.supportDependencies
android {
    namespace config.namespace
    compileSdk config.compileSdk

    defaultConfig {
        applicationId config.applicationId
        minSdk config.minSdk
        targetSdk config.targetSdk
        versionCode config.versionCode
        versionName config.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //指定默认渠道
//        flavorDimensions config.flavorName

    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField('String', 'TestString', '"TestString..."')

        }
    }
    compileOptions {
        sourceCompatibility config.compileOptions
        targetCompatibility config.compileOptions
    }
    kotlinOptions {
        jvmTarget = config.kotlinOptions
    }
    // 新版替代方案
    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        // Compose 是 Kotlin 开发的，需要配置 Kotlin 对应的编译扩展版本
        kotlinCompilerExtensionVersion supportDependencies.compose_version
    }

    //差异化打包
    flavorDimensions config.flavorName


    //多渠道打包
    productFlavors {
        flavor_1 {
            //配置维度
            dimension = config.flavorName
            //配置包名
            applicationId = 'com.wjf.flavor_1'
            minSdk config.minSdk
            targetSdk config.targetSdk
            versionCode config.versionCode
            versionName config.versionName
            signingConfig signingConfigs.debug
            //配置变量
            buildConfigField('String', 'TestString', '"TestString..."')

            //清单文件配置
            manifestPlaceholders = [
                    app_name      : "@string/app_name",
                    app_icon      : "@mipmap/ic_launcher",
                    app_round_icon: "@mipmap/ic_launcher",
                    app_style     : "@style/AppTheme",
            ]
        }
    }
}

dependencies {

    implementation "androidx.core:core-ktx:$supportDependencies.core_ktx"
    implementation "androidx.appcompat:appcompat:$supportDependencies.appcompat"
    implementation "com.google.android.material:material:$supportDependencies.material"
    implementation "androidx.constraintlayout:constraintlayout:$supportDependencies.constraintlayout"
    androidTestImplementation "androidx.test.ext:junit:$supportDependencies.ext_junit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$supportDependencies.espresso_core"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$supportDependencies.kotlinx_coroutines_android"
    implementation "androidx.lifecycle:lifecycle-extensions:$supportDependencies.lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common:$supportDependencies.lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime:$supportDependencies.lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$supportDependencies.lifecycle_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$supportDependencies.core_ktx"


    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$supportDependencies.retrofit2_retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$supportDependencies.retrofit2_converter_gson"
    implementation "com.squareup.okhttp3:logging-interceptor:$supportDependencies.okhttp3_logging_interceptor"


    //Dagger - Hilt
    implementation "com.google.dagger:hilt-android:$supportDependencies.hilt_android"
    kapt "com.google.dagger:hilt-android-compiler:$supportDependencies.hilt_android_compiler"


    // compose
    implementation "androidx.compose.ui:ui:$supportDependencies.compose_version"
    implementation "androidx.compose.material:material:$supportDependencies.compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$supportDependencies.compose_version"
    implementation "androidx.activity:activity-compose:$supportDependencies.activity_compose"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$supportDependencies.compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$supportDependencies.compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$supportDependencies.compose_version"
    implementation "androidx.navigation:navigation-compose:$supportDependencies.navigation_compose"
    implementation "androidx.compose.runtime:runtime-livedata:$supportDependencies.runtime_livedata"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$supportDependencies.lifecycle_viewmodel_compose"
    implementation "androidx.constraintlayout:constraintlayout-compose:$supportDependencies.constraintlayout_compose"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$supportDependencies.lifecycle_runtime_ktx"
    implementation "com.google.accompanist:accompanist-permissions:$supportDependencies.accompanist_permissions"
    implementation "com.google.accompanist:accompanist-insets:$supportDependencies.accompanist_version"
    implementation "com.google.accompanist:accompanist-insets-ui:$supportDependencies.accompanist_version"
    implementation "com.google.accompanist:accompanist-systemuicontroller:$supportDependencies.accompanist_version"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$supportDependencies.leakcanary_android"


    // Local unit tests
    testImplementation "androidx.test:core:$supportDependencies.test_core"
    testImplementation "junit:junit:$supportDependencies.junit"
    testImplementation "androidx.arch.core:core-testing:$supportDependencies.core_testing"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$supportDependencies.kotlinx_coroutines_test"
    testImplementation "com.google.truth:truth:$supportDependencies.truth"
    testImplementation "com.squareup.okhttp3:mockwebserver:$supportDependencies.mockwebserver"
    testImplementation "io.mockk:mockk:$supportDependencies.mockk"

    // Instrumentation tests
    androidTestImplementation "com.google.dagger:hilt-android-testing:$supportDependencies.hilt_android_testing"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$supportDependencies.hilt_android_compiler"
    androidTestImplementation "io.mockk:mockk-android:$supportDependencies.mockk_android"
    androidTestImplementation "androidx.test:runner:$supportDependencies.runner"
    androidTestImplementation "androidx.test:rules:$supportDependencies.rules"
    debugImplementation "androidx.fragment:fragment-testing:$supportDependencies.fragment_testing"



    implementation project(":moduleUtils")
    implementation project(":moduleDesignPattern")
    implementation project(":moduleImgLoader")
    implementation project(":moduleWidget")
    implementation project(":moduleBluetooth")
    implementation project(":moduleSocket")
    implementation project(":moduleRoom")

}